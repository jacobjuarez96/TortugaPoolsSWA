@using BlazorApp.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="form-trans" @ref="contactFormContainer">

    <EditForm Model=@contactFormModel OnValidSubmit="@HandleValidSubmit" FormName="ContactForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="contact-form-container">
            <div class="form-divider-spacer-top"></div>
            <div class="form-group">
                <label for="name" class="label-class">Name</label>
                <InputText autocomplete="on" id="name" placeholder="Name" class="form-control" @bind-Value=@contactFormModel.Name />
                <ValidationMessage For="@(() => contactFormModel.Name)" />

            </div>

            <div class="form-group">
                <label for="email" class="label-class">Email</label>
                <InputText id="email" placeholder="Email" class="form-control" @bind-Value=@contactFormModel.Email />
                <ValidationMessage For="@(() => contactFormModel.Email)" />
            </div>

            <div class="form-group">
                <label for="phonee" class="label-class">Phone Number</label>
                <InputText autocomplete="on" id="phone" placeholder="Phone Number" class="form-control" @bind-Value="contactFormModel.Phone" />
                <ValidationMessage For="@(() => contactFormModel.Phone)" />
            </div>

            <div class="form-group">
                <label for="subject" class="label-class">Subject</label>
                <InputText autocomplete="off" id="subject" placeholder="Subject" class="form-control" @bind-Value="contactFormModel.Subject" />
                <ValidationMessage For="@(() => contactFormModel.Subject)" />
            </div>

            <div class="form-group">
                <label for="message" class="label-class">Message</label>
                <InputTextArea id="message" placeholder="How can we help?" class="form-control message" @bind-Value="contactFormModel.Message" />
                <ValidationMessage For="@(() => contactFormModel.Message)" />
            </div>

            @*  ////////////////////////////////////////////////////////////////////////////////////////////// *@
            @*  ////////////////////////////////////////////////////////////////////////////////////////////// *@
            @*  ////////////////////////////////////////////////////////////////////////////////////////////// *@
            @*  ////////////////////////////////////////////////////////////////////////////////////////////// *@

            <button type="submit" id="form-button" class="button @ButtonClass">
                <span class="button-text">
                    @ButtonText
                </span>
                <div class="button-loader">
                    <div></div>
                    <div></div>
                    <div></div>
                </div>
            </button>
        </div>
    </EditForm>

</div>

@code {
    private ElementReference contactFormContainer;
    private ContactFormModel contactFormModel = new ContactFormModel();
    private string ButtonText { get; set; } = "Send";
    private string ButtonClass { get; set; } = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("observeElement", contactFormContainer);
        }
    }

    private async Task HandleValidSubmit()
    {
        ButtonClass = "loading";
        // Send the form data to the Azure Function
        var response = await Http.PostAsJsonAsync("/api/SendEmailFunction", contactFormModel);
        if (response.IsSuccessStatusCode)
        {
            ButtonText = "Sent!";
            ButtonClass = "success";
            Console.WriteLine("Email sent successfully.");
            StateHasChanged();
            await Task.Delay(4000);
            contactFormModel = new ContactFormModel();
            ButtonText = "Send";
        }
        else
        {
            // Handle failure, e.g., show an error message
            // await JSRuntime.InvokeVoidAsync("animateButtonFailure");
            Console.WriteLine("Failed to send email.");
            await Task.Delay(4000);
            contactFormModel = new ContactFormModel();
        }

    }
}
